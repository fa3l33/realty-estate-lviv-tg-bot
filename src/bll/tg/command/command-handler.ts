import { Bot } from "grammy";
import {
  getUserSession,
  mapFromToSession,
  SessionContextFlavor,
} from "./../session-context";
import MenuComposer from "../menu/menu-composer";
import TextUtils from "../../../common/text-utils";
import config from "../../../config";
import INotificationService from "../../service/inotification.service";

export default class CommandHandler {
    private readonly _notificationService: INotificationService;

    constructor(notificationService: INotificationService) {
        this._notificationService = notificationService;
    }

  public register(bot: Bot<SessionContextFlavor>) {
    var menuComposer = new MenuComposer(this._notificationService);

    bot.api.setMyCommands([
      { command: "start", description: "–ü–æ—á–∞—Ç–æ–∫" },
      { command: "filter", description: "‚öô –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –§—ñ–ª—å—Ç—Ä—É" },
      { command: "help", description: "üÜò –î–æ–ø–æ–º–æ–≥–∞" },
      { command: "cancel", description: "‚ùå –ü—Ä–∏–∑—É–ø–∏–Ω–∏—Ç–∏ —Ä–æ–±–æ—Ç—É –±–æ—Ç–∞" },
    ]);

    bot.command("start", this.start);
    bot.command("filter", (ctx) => this.filter(ctx, menuComposer));
    bot.command("help", this.help);
    bot.command("cancel", this.cancel);

    menuComposer.addListener(bot);
  }

  private async cancel(ctx: SessionContextFlavor): Promise<void> {
    let userSession = await getUserSession(ctx);
    userSession.isActive = false;

    ctx.reply(
      "–†–æ–±–æ—Ç–∞ –±–æ—Ç–∞ –ø—Ä–∏–∑—É–ø–∏–Ω–µ–Ω–∞. –î–ª—è –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó –±–æ—Ç–∞ —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ—é /filter.",
      {
        reply_markup: {
          remove_keyboard: true,
        },
      }
    );
  }

  private help(ctx: SessionContextFlavor): void {
    ctx.reply(
      `–î–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–æ–¥–∞—Ç–∫–æ–≤–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –∑–∞—Ç–µ–ª–µ—Ñ–æ–Ω—É–π—Ç–µ –Ω–∞–º –∞–±–æ —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—å —Ñ–æ—Ä–º–æ—é –¥–ª—è –∑–∞—è–≤–æ–∫ ${TextUtils.toBold(TextUtils.toLink("–ó–∞–ª–∏—à–∏—Ç–∏ –∑–∞—è–≤–∫—É", config.realtyGroup.SITE_URL + '/ostavit_zayavku'))}.\n\n` +
        `${TextUtils.toBold("–ù–∞—à–∞ –∞–¥—Ä–µ—Å–∞:")}\n`
        + `–º. –•–µ—Ä—Å–æ–Ω, –≤—É–ª. –¢–µ–∞—Ç—Ä–∞–ª—å–Ω–∞, 17\n`
        + `—Ç–µ–ª. ${config.realtyGroup.MANAGER_PHONE}`,
      {
        parse_mode: "HTML",
        disable_web_page_preview: true, 
        reply_markup: {
          remove_keyboard: true,
        },
      }
    );

    let chatId = Number(ctx.chat?.id);
    ctx.api.sendContact(
      chatId,
      config.realtyGroup.MANAGER_PHONE,
      "Realty Group"
    );
  }

  private async start(ctx: SessionContextFlavor): Promise<void> {
    const userSession = await ctx.session;
    mapFromToSession(userSession, ctx.from, ctx.chat);

    ctx.reply(
      TextUtils.toBold(config.telegram.BOT_NAME)
       + " ‚Äì —Ü–µ –±–æ—Ç, –∫–æ–º–ø–∞–Ω—ñ—ó " + TextUtils.toLink(TextUtils.toBold('Realty Group'), config.realtyGroup.SITE_URL)
       + ", —â–æ –¥–æ–ø–æ–º–æ–∂–µ –í–∞–º –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –Ω–æ–≤—ñ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó —â–æ–¥–æ –Ω–µ—Ä—É—Ö–æ–º–æ—Å—Ç—ñ —É –º—ñ—Å—Ç—ñ –•–µ—Ä—Å–æ–Ω.\n\n"
       + " ‚ùó –î–ª—è –ø–æ—á–∞—Ç–∫—É —Ä–æ–±–æ—Ç–∏ —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ—é /filter —Ç–∞ –∑–∞–≤–µ—Ä—à—ñ—Ç—å –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è."
       + " –ë–æ—Ç –ø–æ–≤—ñ–¥–æ–º–∏—Ç—å –ø—Ä–æ –∞–∫—Ç—É–∞–ª—å–Ω—ñ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ –ø—ñ–≤ —Ä–æ–∫—É —Ç–∞ –±—É–¥–µ –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ –Ω–æ–≤—ñ –∞–∫—Ç—É–∞–ª—å–Ω—ñ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó —â–æ–¥–µ–Ω–Ω–æ.\n"
       + " ‚ùó –î–ª—è –ø—Ä–∏–ø–∏–Ω–µ–Ω–Ω—è —Ä–æ–±–æ—Ç–∏ –±–æ—Ç—É —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ—é /cancel.\n"
       + " ‚ùó –î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ—ó –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó –±–æ—Ç—É —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ—é /filter —Ç–∞ –∑–∞–≤–µ—Ä—à—ñ—Ç—å –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è.\n"
       + " ‚ùó –î–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–æ–¥–∞—Ç–∫–æ–≤–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó —â–æ–¥–æ –∫–æ–º–ø–∞–Ω—ñ—ó —Ç–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ —Å–∫–æ—Ä–∏—Å—Ç—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ—é /help.",
      {
        parse_mode: "HTML",
        disable_web_page_preview: true,
        reply_markup: {
          remove_keyboard: true,
        },
      }
    );
  }

  private async filter(
    ctx: SessionContextFlavor,
    menuComposer: MenuComposer
  ): Promise<void> {
    const userSession = await ctx.session;

    // user may start bot from filter command, if not active - initialize user
    if (!userSession.isActive) {
      mapFromToSession(userSession, ctx.from, ctx.chat);
    }

    menuComposer.sendDefaultMenu(ctx);
  }
}
